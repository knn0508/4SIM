# -*- coding: utf-8 -*-
"""AILab_Vərəm_Xəstəliyi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BVdJINMiZltFdSj6gWiDi-7ZDE4i-NRx
"""

# Parameters
name = "Gülnarə"
surname = "Əzizova"
sector = "S\u0259hhiyy\u0259"
field = "V\u0259r\u0259m X\u0259st\u0259liyi"
start_year = 2024
end_year = 2026

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
import warnings
import matplotlib
matplotlib.use('Agg')
warnings.filterwarnings('ignore')

# Prophet model (alternative implementation)
try:
    from prophet import Prophet
    PROPHET_AVAILABLE = True
except ImportError:
    PROPHET_AVAILABLE = False
    print("Prophet not available, using alternative forecasting methods")

from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.patches as patches
from datetime import datetime, timedelta

# Set matplotlib to use available fonts
plt.rcParams['font.family'] = ['DejaVu Sans', 'sans-serif']
plt.rcParams['font.size'] = 10
plt.rcParams['figure.figsize'] = (12, 8)
# Enable Unicode support
plt.rcParams['axes.unicode_minus'] = False

"""# Vərəm Xəstəliyi üzrə Statistik Göstəricilər"""

# Read the CSV data
def read_tuberculosis_data():
  df = pd.read_csv('vərəm_xəstəliyi.csv')
  df['Illər'] = pd.to_datetime(df['Illər'], format='%Y')
  df.set_index('Illər', inplace=True)
  return df

read_tuberculosis_data()

def linear_trend_forecast_1(series, periods=3):
    X = np.arange(len(series)).reshape(-1, 1)
    y = series.values

    model_linear = LinearRegression()
    model_linear.fit(X, y)

    future_X = np.arange(len(series), len(series) + periods).reshape(-1, 1)
    forecast_linear = model_linear.predict(future_X)

    # Simple confidence interval estimation
    residuals_linear = y - model_linear.predict(X)
    std_error_linear = np.std(residuals_linear)
    conf_int_linear = np.column_stack([forecast_linear - 1.96*std_error_linear, forecast_linear + 1.96*std_error_linear])

    return forecast_linear, conf_int_linear, model_linear

# Time series forecasting - ARIMA
def arima_forecast_1(series, periods=3, order=(1,1,1)):
    try:
        model_arima = ARIMA(series, order=order)
        fitted_model = model_arima.fit()
        forecast_arima = fitted_model.forecast(steps=periods)
        conf_int_arima = fitted_model.get_forecast(steps=periods).conf_int()
        return forecast_arima.values, conf_int_arima.values, fitted_model
    except:
        try:
            # Fallback to simple ARIMA
            model_arima = ARIMA(series, order=(1,1,0))
            fitted_model = model_arima.fit()
            forecast_arima = fitted_model.forecast(steps=periods)
            conf_int_arima = fitted_model.get_forecast(steps=periods).conf_int()
            return forecast_arima.values, conf_int_arima.values, fitted_model
        except:
            # Final fallback to linear trend
            return linear_trend_forecast_1(series, periods)

# Time series forecasting - Prophet
def prophet_forecast_1(series, periods=3):
    if not PROPHET_AVAILABLE:
        return linear_trend_forecast_1(series, periods)
    try:
        df = pd.DataFrame({
            'ds': series.index,
            'y': series.values
        })

        model_prophet = Prophet(yearly_seasonality=True, daily_seasonality=False, weekly_seasonality=False)
        model_prophet.fit(df)

        future = model_prophet.make_future_dataframe(periods=periods, freq='Y')
        forecast_prophet = model_prophet.predict(future)

        forecast_values_prophet = forecast_prophet.tail(periods)['yhat'].values
        conf_int_prophet = forecast_prophet.tail(periods)[['yhat_lower', 'yhat_upper']].values

        return forecast_values_prophet, conf_int_prophet, model_prophet
    except:
        return linear_trend_forecast_1(series, periods)

def random_forest_forecast_1(series, periods=3):
    # Create features (lagged values)
    n_lags = min(5, len(series) // 2)
    X, y = [], []

    for i in range(n_lags, len(series)):
        X.append(series.values[i-n_lags:i])
        y.append(series.values[i])

    X, y = np.array(X), np.array(y)

    model_rfr = RandomForestRegressor(n_estimators=100, random_state=42)
    model_rfr.fit(X, y)

    # Generate forecasts
    forecasts_rfr = []
    last_values_rfr = series.values[-n_lags:]

    for _ in range(periods):
        pred_rfr = model_rfr.predict([last_values_rfr])[0]
        forecasts_rfr.append(pred_rfr)
        last_values_rfr = np.append(last_values_rfr[1:], pred_rfr)

    return np.array(forecasts_rfr), None, model_rfr

# Analysis functions
def perform_tuberculosis_analysis():
  df = read_tuberculosis_data()
  groups = [
      '0-13 yaşlı - cəmi',
      '14-17 yaşlı - cəmi',
      '18-29 yaşlı - cəmi',
      '30-44 yaşlı - cəmi',
      '45-64 yaşlı - cəmi',
      '65 və yuxarı yaşda - cəmi',
      'kişilər',
      'qadınlar',
      'İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər',
      'Əhalinin hər 100 000 nəfərinə -cəmi (müvafiq cins və yaş qruplarına görə)'
      ]

  results = {}
  for group in groups:
    series = df[group]
    # ARIMA forecast
    arima_pred, arima_conf, arima_model = arima_forecast_1(series)

    # Prophet forecast
    prophet_pred, prophet_conf, prophet_model = prophet_forecast_1(series)

    # Random Forest forecast
    rfr_pred, rfr_conf, rfr_model = random_forest_forecast_1(series)

    # Linear trend forecast
    linear_pred, linear_conf, linear_model = linear_trend_forecast_1(series)

    results[group] = {
        'historical': series,
        'arima': {'forecast': arima_pred, 'conf_int': arima_conf, 'model': arima_model},
        'prophet': {'forecast': prophet_pred, 'conf_int': prophet_conf, 'model': prophet_model},
        'rfr': {'forecast': rfr_pred, 'conf_int': rfr_conf, 'model': rfr_model},
        'linear': {'forecast': linear_pred, 'conf_int': linear_conf, 'model': linear_model}
        }
  return results

perform_tuberculosis_analysis()

def create_forecast_plot_1(group, data, ax):
  historical = data['historical']

  # Plot historical data
  ax.plot(historical.index, historical.values, 'o-', label='Tarixi məlumatlar',
          color='blue', linewidth=2, markersize=4)
  # Future years
  future_years = pd.date_range(start='2024', periods=3, freq='Y')

  # Define which methods to keep for each group
  methods_config = {
      '0-13 yaşlı - cəmi': ['prophet', 'arima'],
      '14-17 yaşlı - cəmi': ['prophet', 'linear'],
      '18-29 yaşlı - cəmi': ['prophet', 'rfr'],
      '30-44 yaşlı - cəmi': ['prophet', 'arima'],
      '45-64 yaşlı - cəmi': ['arima', 'prophet'],
      '65 və yuxarı yaşda - cəmi': ['prophet', 'linear'],
      'kişilər': ['prophet', 'arima'],
      'qadınlar': ['prophet', 'linear'],
      'İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı': ['prophet', 'rfr'],
      'Əhalinin hər 100 000 nəfərinə -cəmi': ['prophet', 'linear']
      }
  # Method display names and colors
  method_info = {
      'arima': {'name': 'ARIMA', 'color': 'red'},
      'prophet': {'name': 'Prophet', 'color': 'green'},
      'rfr': {'name': 'Random Forest', 'color': 'orange'},
      'linear': {'name': 'Xətti Trend', 'color': 'purple'}
      }

  # Get methods to plot for this specialty
  methods_to_plot = methods_config.get(group, ['arima', 'prophet'])

  # Plot forecasts for selected methods
  for method in methods_to_plot:
    info = method_info[method]
    forecast = data[method]['forecast']

    ax.plot(future_years, forecast, 'o--', label=f'{info["name"]} proqnozu',
            color=info['color'], linewidth=2, markersize=6)

    # Add confidence intervals if available
    conf_int = data[method]['conf_int']
    if conf_int is not None:
      try:
        if hasattr(conf_int, 'values'):
          conf_int = conf_int.values
        if conf_int.ndim == 2 and conf_int.shape[1] >= 2:
          ax.fill_between(future_years, conf_int[:, 0], conf_int[:, 1],
                          alpha=0.2, color=info['color'])
        elif conf_int.ndim == 1 and len(conf_int) >= 2:
          margin = np.std(forecast) * 0.5
          ax.fill_between(future_years, forecast - margin, forecast + margin,
                          alpha=0.2, color=info['color'])
      except:
        pass  # Skip if error

  ax.set_title(f'{group} - Zaman Seriyası Analizi və Proqnoz', fontsize=8, fontweight='bold')
  ax.set_xlabel('İl', fontsize=10)

  # Custom y-axis labels based on group
  if '100 000' in group:
    ylabel = '100 000 nəfərə düşən xəstə sayı'
  elif 'nəfər' in group:
    ylabel = 'Xəstə sayı (nəfər)'
  else:
    ylabel = 'Xəstəlik nisbəti'

  ax.set_ylabel(ylabel, fontsize=12)
  ax.legend(fontsize=10)
  ax.grid(True, alpha=0.3)

  # Add trend line
  from scipy import stats
  years_numeric = np.arange(len(historical))
  slope, intercept, r_value, p_value, std_err = stats.linregress(years_numeric, historical.values)

  # Extend trend line to future
  all_years_numeric = np.arange(len(historical) + 3)
  trend_line = slope * all_years_numeric + intercept
  all_years = list(historical.index) + list(future_years)

  ax.plot(all_years, trend_line, '--', color='gray', alpha=0.7,
            label=f'Trend (R²={r_value**2:.3f})')
  ax.legend(fontsize=9)

  # Add explanatory text
  explanations = {
    '0-13 yaşlı - cəmi': (
        "Uşaq yaş qrupunda vərəm xəstəliyi hallarının sayı 2007-2014-cü illərdə 92-dən 128-ə qədər artım tendensiyası göstərmiş, "
        "2015-ci ildən etibarən isə 2023-cü ilə qədər 51.95-ə qədər azalmışdır. Bu azalma uşaqlar üçün peyvənd proqramlarının genişləndirilməsi "
        "və profilaktik tədbirlərin gücləndirilməsi ilə əlaqədardır. 2020-ci ildə COVID-19 pandemiyası dövründə ən aşağı səviyyə (36.1) qeydə alınmışdır."),

    '14-17 yaşlı - cəmi': (
        "Yeniyetmələr qrupunda 2007-ci ildə 126.6 olan göstərici 2010-cu ildə 177.86 ilə pik həddə çatmış, "
        "sonradən davamlı azalaraq 2023-cü ildə 87.95 səviyyəsinə enmişdir. 2020-2021-ci illərdə pandemiya dövründə "
        "ən aşağı səviyyələr (79.05-85.4) qeydə alınsa da, son illərdə sabitləşmə tendensiyası müşahidə olunur."),

    '18-29 yaşlı - cəmi': (
        "Gənclər qrupunda 2007-ci ildə 776.05 olan göstərici 2010-cu ildə 1025.18 ilə ən yüksək səviyyəyə çatmış, "
        "sonradən davamlı azalaraq 2023-cü ildə 356.2 səviyyəsinə enmişdir. Bu qrupda xəstəliyin yayılmasının əsas səbəbləri "
        "sıx sosial əlaqələr, immun sisteminin zəifliyi və sağlamlıq mədəniyyətinin aşağı olmasıdır."),

    '30-44 yaşlı - cəmi': (
        "Bu yaş qrupunda 2007-ci ildə 599.75 olan göstərici 2008-2011-ci illərdə 670.1 ilə pik həddə çatmış, "
        "sonradən davamlı azalaraq 2023-cü ildə 371.45 səviyyəsinə enmişdir. Xüsusilə 2020-ci ildə pandemiya dövründə "
        "kəskin azalma (323.35) müşahidə edilmişdir."),

    '45-64 yaşlı - cəmi': (
        "Orta yaşlı qrupda 2007-ci ildə 315.85 olan göstərici 2014-cü ilə qədər davamlı artaraq 622.1 səviyyəsinə çatmış, "
        "sonradən azalaraq 2023-cü ildə 464.2 səviyyəsinə enmişdir. Bu qrupda xəstəliyin davamlı yüksək səviyyədə qalması "
        "yaşla bağlı immunitetin zəifləməsi ilə əlaqədardır."),

    '65 və yuxarı yaşda - cəmi': (
        "Yaşlı qrupda 2007-ci ildə 60.1 olan göstərici 2019-cu ilə qədər davamlı artaraq 153.15 səviyyəsinə çatmış, "
        "2020-ci ildə pandemiya dövründə kəskin azalsa da (104.95), 2023-cü ildə yenidən 159.55 səviyyəsinə qalxmışdır. "
        "Bu qrupda risk faktorlarının yüksək olması səbəbindən xəstəlik hallarının sayı digər qruplarla müqayisədə daha yavaş azalır."),

    'kişilər': (
        "Kişilərdə vərəm xəstəliyi halları 2007-ci ildə 433.56 olaraq qeydə alınmış, 2010-cu ildə 541.63 ilə pik həddə çatmış, "
        "sonradən davamlı azalaraq 2023-cü ildə 280.26 səviyyəsinə enmişdir. Kişilərdə xəstəliyin yayılmasının qadınlara nisbətən "
        "2 dəfə çox olması sosial-iqtisadi faktorlar və həyat tərzilə əlaqədardır."),

    'qadınlar': (
        "Qadınlarda 2007-ci ildə 136.17 olan göstərici 2023-cü ildə 150.01 səviyyəsinə qədər yüksəlmişdir. "
        "Qadınlarda xəstəliyin azalma tempi kişilərlə müqayisədə daha yavaş olmuşdur. Bu fərq qadınların tibbi yardıma "
        "daha vaxtında müraciət etməsi ilə izah oluna bilər."),

    'İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər': (
        "Ümumi vərəm xəstəliyi hallarının sayı 2007-ci ildə 3713 nəfər olmuş, 2010-cu ildə 4801 nəfərlə pik həddə çatmış, "
        "sonradən davamlı azalaraq 2023-cü ildə 2816 nəfərə enmişdir. 2020-2021-ci illərdə pandemiya dövründə "
        "ən aşağı səviyyələr (2535-2558 nəfər) qeydə alınmışdır. 2007-2023-cü illər ərzində ümumi azalma 24.2% təşkil etmişdir."),

    'Əhalinin hər 100 000 nəfərinə -cəmi (müvafiq cins və yaş qruplarına görə)': (
        "100.000 əhaliyə düşən xəstəlik hallarının sayı 2007-ci ildə 43.16 olmuş, 2010-cu ildə 53.74 ilə ən yüksək səviyyəyə çatmış, "
        "sonradən davamlı azalaraq 2023-cü ildə 27.7 səviyyəsinə enmişdir. Bu göstəricidə 2007-2023-cü illər ərzində "
        "36% azalma qeydə alınmışdır ki, bu da səhiyyə sisteminin profilaktik tədbirlərdəki uğurlarını əks etdirir.")
  }

  import textwrap
  # Add values for each corresponding years
  for year, value in zip(historical.index, historical.values):
    ax.annotate(f'{int(value/10)}K', xy=(year, value), xytext=(0, 3),
                fontsize=6, ha='right', textcoords='offset points',
                color='black', weight='bold')

  if group in explanations:
    wrapped_text = textwrap.fill(explanations[group], width=100)
    ax.text(0.5, -0.25, wrapped_text, ha='center', va='top', transform=ax.transAxes,
            fontsize=10, style='italic', color='#555555')

def create_tuberculosis_summary_statistics(results):
    """Create optimized summary statistics table with better formatting"""
    summary_data = []

    for group, data in results.items():
        historical = data['historical']

        # Calculate statistics with more robust handling
        mean_val = historical.mean()
        std_val = historical.std()
        trend = (historical.iloc[-1] - historical.iloc[0]) / len(historical) if len(historical) > 1 else 0

        # Process forecasts more efficiently
        forecasts = []
        for method in ['arima', 'prophet', 'rfr', 'linear']:
            try:
                method_forecast = data[method]['forecast']
                if hasattr(method_forecast, '__len__'):
                    forecasts.append(method_forecast[:3])  # Take first 3 values
            except:
                continue

        # Calculate average forecasts with numpy for better performance
        avg_forecasts = np.mean(forecasts, axis=0) if forecasts else [historical.iloc[-1]]*3

        # Format numbers with thousands separator
        def format_num(x):
            return f"{x:,.0f}".replace(",", " ") if isinstance(x, (int, float)) else str(x)

        # Corrected conditional expression for 'Göstərici'
        if group == 'İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər':
            indicator = 'İlk diaqnozlu xəstələr'
        elif group == 'Əhalinin hər 100 000 nəfərinə -cəmi (müvafiq cins və yaş qruplarına görə)':
            indicator = '100K nəfərə düşən'
        else:
            indicator = group.replace(" - cəmi", "")  # Shorter labels


        summary_data.append({
            'Göstərici': indicator,
            'Orta (2007-2023)': format_num(mean_val),
            'St. Deviation': format_num(std_val),
            'Trend': f"{trend:.1f}",
            '2024 proq.': format_num(avg_forecasts[0]),
            '2025 proq.': format_num(avg_forecasts[1]),
            '2026 proq.': format_num(avg_forecasts[2])
        })

    return pd.DataFrame(summary_data)

def draw_summary_figure(pdf, total_cases, age_groups, pie_labels, pie_sizes, growth_rates):
    fig = plt.figure(figsize=(8.3, 11.7))  # A4 size
    gs = plt.GridSpec(4, 1, height_ratios=[1, 1, 1, 1])
    fig.subplots_adjust(hspace=0.5)

    # Chart 1 - Total cases over time
    ax1 = fig.add_subplot(gs[0])
    ax1.plot(total_cases.index.year, total_cases.values,
             color='#D32F2F', linewidth=2, marker='o', markersize=4)
    ax1.set_title('İlk Dəfə Diaqnoz Qoyulmuş Vərəm Xəstələrinin Sayı (2007-2023)',
                 fontsize=12, fontweight='bold', pad=8)
    ax1.set_xlabel('İl', fontsize=9)
    ax1.set_ylabel('Xəstə sayı (nəfər)', fontsize=9)
    ax1.grid(True, alpha=0.3)
    ax1.annotate(f"{int(total_cases.values[-1])}",
                 xy=(total_cases.index.year[-1], total_cases.values[-1]),
                 xytext=(5, 0), textcoords='offset points',
                 fontsize=8, fontweight='bold', color='#D32F2F')
    ax1.tick_params(axis='both', labelsize=8)

    # Chart 2 - Age group distribution (bar)
    ax2 = fig.add_subplot(gs[1])
    bars = ax2.barh(list(age_groups.keys()), list(age_groups.values()),
                    color='#1976D2', alpha=0.85)
    ax2.set_title('2023-cü İldə Yaş Qruplarına görə Vərəm Halları',
                 fontsize=11, fontweight='bold', pad=6)
    ax2.set_xlabel('Xəstə sayı', fontsize=9)
    ax2.tick_params(axis='both', labelsize=8)
    ax2.set_xlim(0, max(age_groups.values()) * 1.2)

    for label in ax2.get_yticklabels():
        label.set_horizontalalignment('right')

    for bar in bars:
        ax2.text(bar.get_width() + max(age_groups.values()) * 0.02,
                 bar.get_y() + bar.get_height()/2,
                 f"{int(bar.get_width())}", va='center',
                 fontsize=7.5, fontweight='bold')

    # Chart 3 - Age group distribution (pie)
    ax3 = fig.add_subplot(gs[2])
    pie_colors = plt.cm.Paired(np.linspace(0, 1, len(pie_labels)))
    ax3.pie(pie_sizes, labels=pie_labels, autopct='%1.0f%%',
            startangle=140, colors=pie_colors,
            textprops={'fontsize': 7}, pctdistance=0.85, radius=1.0)
    ax3.set_title('2023-cü İl üzrə Yaş Qruplarının Paylanması',
                 fontsize=11, fontweight='bold', pad=6)

    # Chart 4 - Growth rates
    ax4 = fig.add_subplot(gs[3])
    growth_colors = ['#388E3C' if x > 0 else '#D32F2F' for x in growth_rates.values()]
    bars2 = ax4.bar(list(growth_rates.keys()), list(growth_rates.values()),
                    color=growth_colors, alpha=0.85)
    ax4.set_title('2007-2023 Dövründə Artım Dərəcəsi (%)',
                 fontsize=12, fontweight='bold', pad=6)
    ax4.set_ylabel('Artım faizi', fontsize=9)
    ax4.tick_params(axis='x', labelsize=8, rotation=30)
    ax4.tick_params(axis='y', labelsize=8)

    for bar in bars2:
        ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height(),
                 f"{bar.get_height():.1f}%", ha='center', va='bottom',
                 fontsize=7.5, fontweight='bold')
    ax4.axhline(y=0, color='black', linestyle='-', alpha=0.5)

    pdf.savefig(fig, bbox_inches='tight')
    plt.close()

# from matplotlib.backends.backend_pdf import PdfPages
# import matplotlib.pyplot as plt
# from datetime import datetime
# import textwrap

# # Generate a single pdf report for each sub-category
# def generate_sub_category_report(group_name, data):
#   A4_SIZE = (8.3, 11.7)
#   generated_pdf_path = f"{group_name}_Report.pdf"

#   # Create title page
#   with PdfPages(generated_pdf_path) as pdf:
#     fig, ax = plt.subplots(figsize=A4_SIZE)
#     ax.axis('off')
#     ax.text(0.5, 0.90, f'{group_name} üzrə Hesabat',
#             ha='center', fontsize=20, fontweight='bold')
#     ax.text(0.5, 0.85, f'Zaman Seriyası Analizi və Proqnozlar ({start_year}-{end_year})',
#             ha='center', fontsize=16)
#     ax.text(0.5, 0.80, f'Hazırlayan: {name} {surname}',
#             ha='center', fontsize=14)
#     ax.text(0.5, 0.75, f'Tarix: {datetime.now().strftime("%d.%m.%Y")}',
#             ha='center', fontsize=12)
#     pdf.savefig(fig)
#     plt.close()

#     # Visualize each sub category
#     fig = plt.figure(figsize=A4_SIZE)
#     ax = fig.add_axes([0.1, 0.5, 0.87, 0.45])
#     create_forecast_plot_1(group_name, data, ax)
#     pdf.savefig(fig)
#     plt.close()

#   print(f"{group_name} üçün PDF yaradıldı: {generated_pdf_path}")

# def generate_pdf_by_sub_category(category_name, results):
#   if category_name == "İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər":
#     res = "İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər"
#   elif category_name == "Əhalinin hər 100 000 nəfərinə -cəmi (müvafiq cins və yaş qruplarına görə":
#     res = "Əhalinin hər 100 000 nəfərinə -cəmi (müvafiq cins və yaş qruplarına görə)"
#   elif category_name == "0-13 yaşlı - cəmi":
#     res = "0-13 yaşlı - cəmi"
#   elif category_name == "14-17 yaşlı - cəmi":
#     res = "14-17 yaşlı - cəmi"
#   elif category_name == "18-29 yaşlı - cəmi":
#     res = "18-29 yaşlı - cəmi"
#   elif category_name == "30-44 yaşlı - cəmi":
#     res = "30-44 yaşlı - cəmi"
#   elif category_name == "45-64 yaşlı - cəmi":
#     res = "45-64 yaşlı - cəmi"
#   elif category_name == "65 və yuxarı yaşda - cəmi":
#     res = "65 və yuxarı yaşda - cəmi"
#   elif category_name == "kişilər":
#     res = "kişilər"
#   elif category_name == "qadınlar":
#     res = "qadınlar"
#   else:
#     print(f"Alt katqoriya tapılmadı!")
#     return

#   generate_sub_category_report(res, results[res])


# results = perform_tuberculosis_analysis()
# generate_pdf_by_sub_category("İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər", results)

# Automatic Sub Category PDF Generator

# Created the category mapping structure
CATEGORY_MAPPING = {
    "İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı": "İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər",
    "Əhalinin hər 100 000 nəfərinə": "Əhalinin hər 100 000 nəfərinə -cəmi (müvafiq cins və yaş qruplarına görə)",
    "0-13 yaşlı": "0-13 yaşlı - cəmi",
    "14-17 yaşlı": "14-17 yaşlı - cəmi",
    "18-29 yaşlı": "18-29 yaşlı - cəmi",
    "30-44 yaşlı": "30-44 yaşlı - cəmi",
    "45-64 yaşlı": "45-64 yaşlı - cəmi",
    "65 və yuxarı yaşda": "65 və yuxarı yaşda - cəmi",
    "kişilər": "kişilər",
    "qadınlar": "qadınlar"
}

# Completed PDF generator functionality
def generate_sub_category_report_v2(group_name, data, output_dir="reports"):
    import os

    # Create a result directory
    os.makedirs(output_dir, exist_ok=True)

    A4_SIZE = (8.3, 11.7)
    safe_filename = group_name.replace(" ", "_").replace("-", "_").replace(".", "_")
    generated_pdf_path = os.path.join(output_dir, f"{safe_filename}_Report.pdf")

    with PdfPages(generated_pdf_path) as pdf:
        # Title page
        fig, ax = plt.subplots(figsize=A4_SIZE)
        ax.axis('off')
        ax.text(0.5, 0.90, f'{group_name} üzrə Detallı Hesabat',
                ha='center', fontsize=10, fontweight='bold')
        ax.text(0.5, 0.85, f'Zaman Seriyası Analizi və Proqnozlar ({start_year}-{end_year})',
                ha='center', fontsize=14)
        ax.text(0.5, 0.80, f'Hazırlayan: {name} {surname}',
                ha='center', fontsize=12)
        ax.text(0.5, 0.75, f'Sektor: {sector}',
                ha='center', fontsize=12)
        ax.text(0.5, 0.70, f'Sahə: {field}',
                ha='center', fontsize=12)
        ax.text(0.5, 0.65, f'Tarix: {datetime.now().strftime("%d.%m.%Y")}',
                ha='center', fontsize=10)

        # Extra info
        ax.text(0.5, 0.55, 'Hesabat tərkibi:',
                ha='center', fontsize=12, fontweight='bold')
        ax.text(0.5, 0.50, '• Tarixi məlumatların analizi',
                ha='center', fontsize=10)
        ax.text(0.5, 0.47, '• Müxtəlif proqnoz metodları',
                ha='center', fontsize=10)
        ax.text(0.5, 0.44, '• Statistik göstəricilər',
                ha='center', fontsize=10)
        ax.text(0.5, 0.41, '• Gələcək illər üçün proqnozlar',
                ha='center', fontsize=10)

        pdf.savefig(fig)
        plt.close()

        # Main page's visual
        fig = plt.figure(figsize=A4_SIZE)
        ax = fig.add_axes([0.1, 0.3, 0.85, 0.6])
        create_forecast_plot_1(group_name, data, ax)

        # Add statistic info
        stats_text = f"""
        Orta dəyər: {data['historical'].mean():.2f}     Minimum: {data['historical'].min():.2f}
        Standart sapma: {data['historical'].std():.2f}     Maksimum: {data['historical'].max():.2f}
        Son il (2023): {data['historical'].iloc[-1]:.2f}
        """

        ax_stats = fig.add_axes([0.1, 0.02, 0.85, 0.25])
        ax_stats.axis('off')
        ax_stats.text(0.02, 0.9, stats_text, fontsize=10,
                      transform=ax_stats.transAxes, verticalalignment='top')

        pdf.savefig(fig)
        plt.close()

    print(f"{group_name} üçün PDF yaradıldı: {generated_pdf_path}")
    return generated_pdf_path

# Automatic PDF generator for all categories
def generate_all_category_reports(results, output_dir="reports"):
    generated_files = []

    print("Bütün kateqoriyalar üçün PDF-lər yaradılır...")

    for category_key in results.keys():
        try:
            pdf_path = generate_sub_category_report_v2(category_key, results[category_key], output_dir)
            generated_files.append(pdf_path)
        except Exception as e:
            print(f"{category_key} üçün PDF yaradılarkən xəta: {e}")

    print(f"Cəmi {len(generated_files)} PDF faylı yaradıldı")
    return generated_files

# Optimized functionality for streamlit
def generate_selected_category_report(selected_category, results, output_dir="reports"):
    # Check the selected sub category with mapping
    actual_category = None
    if selected_category in results:
        actual_category = selected_category
    else:
        for key, value in CATEGORY_MAPPING.items():
            if key in selected_category or selected_category in key:
                if value in results:
                    actual_category = value
                    break

    if actual_category is None:
        print(f"Kateqoriya tapılmadı: {selected_category}")
        return None

    try:
        pdf_path = generate_sub_category_report_v2(actual_category, results[actual_category], output_dir)
        return pdf_path
    except Exception as e:
        print(f"PDF yaradılarkən xəta: {e}")
        return None

# 5. Sub category list for streamlit
def get_available_categories(results):
    categories = []
    for key in results.keys():
        if key in CATEGORY_MAPPING:
            categories.append(CATEGORY_MAPPING[key])
        else:
            categories.append(key)

    return categories

def main():
    results = perform_tuberculosis_analysis()
    print("1. Bütün kateqoriyalar üçün PDF yaratmaq")
    print("2. Seçilmiş kateqoriya üçün PDF yaratmaq")
    choice = input("Seçiminizi edin (1 və ya 2): ")

    if choice == "1":
        generate_all_category_reports(results)
    elif choice == "2":
        available_categories = get_available_categories(results)
        print("\nMövcud kateqoriyalar:")
        for i, cat in enumerate(available_categories, 1):
            print(f"{i}. {cat}")

        try:
            selection = int(input("\nKateqoriya nömrəsini seçin: ")) - 1
            if 0 <= selection < len(available_categories):
                selected_cat = available_categories[selection]
                generate_selected_category_report(selected_cat, results)
            else:
                print("Yanlış seçim!")
        except ValueError:
            print("Yanlış giriş!")

if __name__ == "__main__":
    main()

# from matplotlib.backends.backend_pdf import PdfPages
# import matplotlib.pyplot as plt
# import matplotlib.patches as patches
# from datetime import datetime
# import numpy as np
# from PyPDF2 import PdfMerger
# import os
# import textwrap # Import textwrap

# df = read_tuberculosis_data()

# def generate_pdf_report(results):
#   A4_SIZE = (8.3, 11.7)
#   generated_pdf_path = f"{sector}_Hesabat_{end_year}.pdf"
#   additional_pdf_path = "Vərəm_Xəstəliyi_Qeydlər.pdf"
#   merged_pdf_path = "Vərəm_Xəstəliyi_Hesabat.pdf"
#   title_pdf_path = f"Title_{sector}_{end_year}.pdf"
#   content_pdf_path = f"Content_{sector}_{end_year}.pdf"

#   # Create title page
#   with PdfPages(title_pdf_path) as pdf:
#     fig, ax = plt.subplots(figsize=A4_SIZE)
#     ax.axis('off')
#     ax.text(0.5, 0.90, f'{field} üzrə Statistik Hesabat',
#             ha='center', fontsize=24, fontweight='bold')
#     ax.text(0.5, 0.85, f'Zaman Seriyası Analizi və Proqnozlar ({start_year}-{end_year})',
#             ha='center', fontsize=16)
#     ax.text(0.5, 0.80, f'Hazırlayan: {name} {surname}',
#             ha='center', fontsize=14)
#     ax.text(0.5, 0.75, f'Tarix: {datetime.now().strftime("%d.%m.%Y")}',
#             ha='center', fontsize=12)

#     # Add a decorative rectangle
#     rect = patches.Rectangle((0.20, 0.55), 0.60, 0.10,
#                               linewidth=2, edgecolor='red',
#                               facecolor='lightcoral', alpha=0.3)
#     ax.add_patch(rect)

#     # Add some summary information
#     total_cases = results['İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər']['historical']
#     last_year = total_cases.index[-1].year
#     last_value = total_cases.values[-1]
#     change = ((last_value - total_cases.values[0]) / total_cases.values[0]) * 100

#     stats_text = f"""
#     2007-{last_year} dövründə vərəm xəstəliyi hallarının sayı:
#     • 2007-ci ildə: {total_cases.values[0]:.0f} nəfər
#     • {last_year}-cı ildə: {last_value:.0f} nəfər
#     • Dəyişiklik: {change:.1f}%
#     """

#     ax.text(0.50, 0.60, stats_text, ha='center', va='center', fontsize=10)

#     plt.tight_layout()
#     pdf.savefig(fig)
#     plt.close()

#   # Create content pages
#   with PdfPages(content_pdf_path) as pdf:
#     # Prepare data for summary figure
#       total_cases = results['İlk dəfə qoyulmuş diaqnozla qeydə alınmış xəstələrin sayı- cəmi, nəfər']['historical']

#       age_groups = {
#           '0-13 yaş': results['0-13 yaşlı - cəmi']['historical'].iloc[-1],
#           '14-17 yaş': results['14-17 yaşlı - cəmi']['historical'].iloc[-1],
#           '18-29 yaş': results['18-29 yaşlı - cəmi']['historical'].iloc[-1],
#           '30-44 yaş': results['30-44 yaşlı - cəmi']['historical'].iloc[-1],
#           '45-64 yaş': results['45-64 yaşlı - cəmi']['historical'].iloc[-1],
#           '65+ yaş': results['65 və yuxarı yaşda - cəmi']['historical'].iloc[-1]
#           }

#       pie_labels = list(age_groups.keys())
#       pie_sizes = list(age_groups.values())

#       growth_rates = {}
#       for group in age_groups.keys():
#         key = {
#             '0-13 yaş': '0-13 yaşlı - cəmi',
#             '14-17 yaş': '14-17 yaşlı - cəmi',
#             '18-29 yaş': '18-29 yaşlı - cəmi',
#             '30-44 yaş': '30-44 yaşlı - cəmi',
#             '45-64 yaş': '45-64 yaşlı - cəmi',
#             '65+ yaş': '65 və yuxarı yaşda - cəmi'}[group]

#         hist = results[key]['historical']
#         growth_rate = ((hist.iloc[-1] - hist.iloc[0]) / hist.iloc[0]) * 100
#         growth_rates[group] = growth_rate

#       # Draw summary figure
#       draw_summary_figure(pdf, total_cases, age_groups, pie_labels, pie_sizes, growth_rates)

#       # Add summary statistics table
#       fig, ax = plt.subplots(figsize=(8.3, 11.7))
#       ax.axis('off')

#       summary_df = create_tuberculosis_summary_statistics(results)
#       table = ax.table(cellText=summary_df.values,
#                       colLabels=summary_df.columns,
#                       cellLoc='center',
#                       loc='center',
#                       colColours=['#f3f3f3']*len(summary_df.columns))

#       table.auto_set_font_size(False)
#       table.set_fontsize(5)
#       table.scale(1.5, 1)

#       ax.set_title('Statistik Göstəricilər və Proqnozlar', fontsize=14, fontweight='bold', pad=10)
#       pdf.savefig(fig, bbox_inches='tight')
#       plt.close()

#       # Add individual forecast plots for each group
#       for group, data in results.items():
#         fig = plt.figure(figsize=A4_SIZE)
#         ax = fig.add_axes([0.1, 0.5, 0.87, 0.45])
#         create_forecast_plot_1(group, data, ax)
#         plt.tight_layout()
#         pdf.savefig(fig)
#         plt.close()

#   # Merge PDFs
#   from PyPDF2 import PdfMerger
#   merger = PdfMerger()
#   merger.append(title_pdf_path)
#   merger.append(additional_pdf_path)
#   merger.append(content_pdf_path)
#   merger.write(merged_pdf_path)
#   merger.close()

#   # Clean up temporary files
#   import os
#   try:
#     os.remove(title_pdf_path)
#     os.remove(content_pdf_path)
#   except:
#     pass

#   print(f"✅ Hesabat tamamlandı: '{merged_pdf_path}'")

# # Main execution
# print("PDF hesabatı yaradılır...")
# results = perform_tuberculosis_analysis()
# generate_pdf_report(results)





